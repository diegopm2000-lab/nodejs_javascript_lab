openapi: 3.0.0
info:
  title: Identity Management Compact
  description: Identity Management Compact - Express Open Api - NLayer
  version: 0.1.0
paths:

  # ##################################################################
  # Authentication
  # ##################################################################

  /authenticate:
    post:
      summary: authenticate user
      tags:
        - "Authentication"
      operationId: authenticate
      parameters:
        - name: username
          in: header
          required: true
          schema:
            type: string
        - name: passwd
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/AuthenticatedResponse"

  # ##################################################################
  # Authorization
  # ##################################################################

  /authorize:
    get:
      summary: authorize endpoint
      tags:
        - "Authorization"
      operationId: authorize
      parameters:
        - name: endpointurl
          in: header
          required: true
          schema:
            type: string
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/AuthorizedResponse"

  # ##################################################################
  # Users
  # ##################################################################

  /users:
    post: 
      summary: Create a new user
      tags:
        - users
      operationId: createUser 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationData"
      responses: 
        "201": 
          description: User created OK and returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"

    get:
      summary: Get all users
      tags:
        - users
      operationId: getUsers
      responses: 
        "200": 
          description: User created OK and user data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserDataList"

  /users/{userId}:
    get:
      summary: Get the user by id
      tags:
        - users
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: User data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"

    put:
      summary: Update the user by Id
      tags:
        - users
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateData"
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: User updated OK and data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"

    delete:
      summary: Delete the user by Id
      tags:
        - users
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses: 
        "204": 
          description: User deleted OK, no data returned

  /users/{userId}/groups:
    post: 
      summary: add a group to the user
      tags:
        - users
      operationId: addGroupToUser
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGroupData"
      responses: 
        "200": 
          description: Group Added and user data returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"

  /users/{userId}/groups/{groupId}:
    delete:
      summary: Delete the group from the user
      tags:
        - users
      operationId: deleteGroupFromUser
      parameters:
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: group Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Group Deleted and user data returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserData"

  # ##################################################################
  # Groups
  # ##################################################################

  /groups:
    post: 
      summary: Create a new group
      tags:
        - groups
      operationId: createGroup 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreationData"
      responses: 
        "201": 
          description: Group created OK and returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/GroupData"

    get:
      summary: Get all groups
      tags:
        - groups
      operationId: getGroups
      responses: 
        "200": 
          description: Group created OK and group data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/GroupDataList"

  /groups/{groupId}:
    get:
      summary: Get the group by id
      tags:
        - groups
      operationId: getGroupById
      parameters:
        - name: groupId
          in: path
          description: group Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Group data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/GroupData"

    put:
      summary: Update the group by Id
      tags:
        - groups
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdateData"
      parameters:
        - name: groupId
          in: path
          description: group Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Group updated OK and data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/GroupData"

    delete:
      summary: Delete the group by Id
      tags:
        - groups
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          description: group Id
          required: true
          schema:
            type: string
      responses: 
        "204": 
          description: Group deleted OK, no data returned

  /groups/{groupId}/roles:
    post: 
      summary: add a role to the group
      tags:
        - groups
      operationId: addRoleToGroup
      parameters:
        - name: groupId
          in: path
          description: group Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRoleData"
      responses: 
        "200": 
          description: Role Added and group data returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/GroupData"

  /groups/{groupId}/roles/{roleId}:
    delete:
      summary: Delete the role from the group
      tags:
        - groups
      operationId: deleteRoleFromGroup
      parameters:
        - name: groupId
          in: path
          description: group Id
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Role deleted from group
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/GroupData"

  # ##################################################################
  # Roles
  # ##################################################################

  /roles:
    post: 
      summary: Create a new role
      tags:
        - roles
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreationData"
      responses: 
        "201": 
          description: Role created OK and returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/RoleData"

    get:
      summary: Get all roles
      tags:
        - roles
      operationId: getRoles
      responses: 
        "200": 
          description: Role created OK and role data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/RoleDataList"

  /roles/{roleId}:
    get:
      summary: Get the role by id
      tags:
        - roles
      operationId: getRoleById
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Role data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/RoleData"

    put:
      summary: Update the role by Id
      tags:
        - roles
      operationId: updateRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdateData"
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Role updated OK and data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/RoleData"

    delete:
      summary: Delete the role by Id
      tags:
        - roles
      operationId: deleteRole
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
      responses: 
        "204": 
          description: Role deleted OK, no data returned

  /roles/{roleId}/endpoints:
    post: 
      summary: add an endpoint to the role
      tags:
        - roles
      operationId: addEndpointToRole
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddEndpointData"
      responses: 
        "200": 
          description: Endpoint Added and role data returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EndpointData"

  /roles/{roleId}/endpoints/{endpointId}:
    delete:
      summary: Delete the endpoint from the role
      tags:
        - roles
      operationId: deleteEndpointFromRole
      parameters:
        - name: roleId
          in: path
          description: role Id
          required: true
          schema:
            type: string
        - name: endpointId
          in: path
          description: endpoint Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Endpoint deleted from role
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EndpointData"

  # ##################################################################
  # Endpoints
  # ##################################################################

  /endpoints:
    post: 
      summary: Create a new endpoint
      tags:
        - endpoints
      operationId: createEndpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndpointCreationData"
      responses: 
        "201": 
          description: Endpoint created OK and returned 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EndpointData"

    get:
      summary: Get all endpoints
      tags:
        - endpoints
      operationId: getEndpoints
      responses: 
        "200": 
          description: Endpoint created OK and endpoint data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EndpointDataList"

  /endpoints/{endpointId}:
    get:
      summary: Get the endpoint by id
      tags:
        - endpoints
      operationId: getEndpointById
      parameters:
        - name: endpointId
          in: path
          description: endpoint Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Endpoint data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EndpointData"

    put:
      summary: Update the endpoint by Id
      tags:
        - endpoints
      operationId: updateEndpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndpointUpdateData"
      parameters:
        - name: endpointId
          in: path
          description: endpoint Id
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Endpoint updated OK and data returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EndpointData"

    delete:
      summary: Delete the endpoint by Id
      tags:
        - endpoints
      operationId: deleteEndpoint
      parameters:
        - name: endpointId
          in: path
          description: endpoint Id
          required: true
          schema:
            type: string
      responses: 
        "204": 
          description: Endpoint deleted OK, no data returned

servers:
  - url: http://localhost:8080/api
components:
  responses:

    Error:
      description: Error Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    
    ErrorResponse:
      type: object

    # Authentication

    AuthenticatedResponse:
      required:
        - token
      properties:
        token:
          type: string

    # Authorization

    AuthorizedResponse:
      required:
        - token
      properties:
        token:
          type: string

    # Users      

    BasicUserData:
      type: object 
      properties: 
        username:
          type: string
        password:
          type: string
        enabled:
          type: boolean
        initDate:
          type: string
          format: date-time
        groups:
          type: array
          items:
            $ref: "#/components/schemas/GroupIdData"

    UserData:
      allOf:
        - $ref: '#/components/schemas/BasicUserData'
        - type: object
      properties: 
        id: 
          type: string
    
    UserCreationData:
      allOf:
        - $ref: '#/components/schemas/BasicUserData'
        - type: object

    UserUpdateData:
      allOf:
        - $ref: '#/components/schemas/BasicUserData'
        - type: object

    UserDataList:
      type: array
      items:
        $ref: "#/components/schemas/UserData"

    AddGroupData:
      type: object
      properties: 
        groupId:
          type: string

    # Groups  

    GroupIdData:
      type: object
      properties:
        id:
          type: string

    BasicGroupData:
      type: object 
      properties: 
        name:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleIdData"

    GroupData:
      allOf:
        - $ref: '#/components/schemas/BasicGroupData'
        - type: object
      properties: 
        id: 
          type: string
    
    GroupCreationData:
      allOf:
        - $ref: '#/components/schemas/BasicGroupData'
        - type: object

    GroupUpdateData:
      allOf:
        - $ref: '#/components/schemas/BasicGroupData'
        - type: object

    GroupDataList:
      type: array
      items:
        $ref: "#/components/schemas/GroupData"

    AddRoleData:
      type: object
      properties: 
        groupId:
          type: string

    # Roles  

    RoleIdData:
      type: object
      properties:
        id:
          type: string

    BasicRoleData:
      type: object 
      properties: 
        name:
          type: string
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/EndpointIdData"

    RoleData:
      allOf:
        - $ref: '#/components/schemas/BasicRoleData'
        - type: object
      properties: 
        id: 
          type: string
    
    RoleCreationData:
      allOf:
        - $ref: '#/components/schemas/BasicRoleData'
        - type: object

    RoleUpdateData:
      allOf:
        - $ref: '#/components/schemas/BasicRoleData'
        - type: object

    RoleDataList:
      type: array
      items:
        $ref: "#/components/schemas/RoleData"

    AddEndpointData:
      type: object
      properties: 
        groupId:
          type: string

    # Endpoints  

    EndpointIdData:
      type: object
      properties:
        id:
          type: string

    BasicEndpointData:
      type: object 
      properties: 
        name:
          type: string
        description:
          type: string
        method:
          type: string
        url:
          type: string
        urlregex:
          type: string

    EndpointData:
      allOf:
        - $ref: '#/components/schemas/BasicEndpointData'
        - type: object
      properties: 
        id: 
          type: string
    
    EndpointCreationData:
      allOf:
        - $ref: '#/components/schemas/BasicEndpointData'
        - type: object

    EndpointUpdateData:
      allOf:
        - $ref: '#/components/schemas/BasicEndpointData'
        - type: object

    EndpointDataList:
      type: array
      items:
        $ref: "#/components/schemas/EndpointData"